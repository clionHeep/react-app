generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model menu {
  id          Int              @id @default(autoincrement())
  name        String
  path        String?
  component   String?
  redirect    String?
  icon        String?
  sort        Int              @default(0)
  hidden      Boolean          @default(false)
  parentId    Int?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // 关系
  parent      menu?            @relation("menuTomenu", fields: [parentId], references: [id], map: "Menu_parentId_fkey")
  children    menu[]           @relation("menuTomenu")
  rolemenu    rolemenu[]       // 通过中间表与角色关联
  roles       role[]           @relation("RoleToMenu") // 多对多关系：菜单-角色
  
  // 修改：统一使用menuPermission作为菜单-权限关联表
  menuPermissions menuPermission[] // 菜单-权限详细关联，包含actionType

  @@index([parentId], map: "Menu_parentId_fkey")
}

model permission {
  id             Int              @id @default(autoincrement())
  code           String           @unique(map: "Permission_code_key")
  name           String
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // 关系
  rolepermission rolepermission[] // 通过中间表与角色关联
  roles          role[]           @relation("RoleToPermission") // 多对多关系：权限-角色
  
  // 修改：统一使用menuPermission作为权限-菜单关联表
  menuPermissions menuPermission[] // 权限-菜单详细关联，包含actionType
}

model post {
  id        String   @id
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user?    @relation(fields: [authorId], references: [id], map: "Post_authorId_fkey")

  @@index([authorId], map: "Post_authorId_fkey")
}

model refreshtoken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "RefreshToken_token_key")
  userId    Int      @unique(map: "RefreshToken_userId_key")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "RefreshToken_userId_fkey")
}

model role {
  id             Int              @id @default(autoincrement())
  name           String           @unique(map: "Role_name_key")
  description    String?
  // 父角色ID，形成角色继承关系
  parentId       Int?
  // 是否是系统内置角色，内置角色不可删除
  isSystem       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // 关系
  rolemenu       rolemenu[]       // 通过中间表与菜单关联
  rolepermission rolepermission[] // 通过中间表与权限关联
  userrole       userrole[]       // 通过中间表与用户关联
  permissions    permission[]     @relation("RoleToPermission") // 多对多关系：角色-权限
  menus          menu[]           @relation("RoleToMenu") // 多对多关系：角色-菜单
  users          user[]           @relation("UserToRole") // 多对多关系：角色-用户
  
  // 角色继承关系
  parent         role?            @relation("RoleInheritance", fields: [parentId], references: [id], onDelete: SetNull)
  children       role[]           @relation("RoleInheritance")
  
  @@index([parentId])
}

model rolemenu {
  id        Int      @id @default(autoincrement())
  roleId    Int
  menuId    Int
  createdAt DateTime @default(now())
  menu      menu     @relation(fields: [menuId], references: [id], onDelete: Cascade, map: "RoleMenu_menuId_fkey")
  role      role     @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "RoleMenu_roleId_fkey")

  @@unique([roleId, menuId], map: "RoleMenu_roleId_menuId_key")
  @@index([menuId], map: "RoleMenu_menuId_fkey")
}

model rolepermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  permission   permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "RolePermission_permissionId_fkey")
  role         role       @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "RolePermission_roleId_fkey")

  @@unique([roleId, permissionId], map: "RolePermission_roleId_permissionId_key")
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model user {
  id           Int           @id @default(autoincrement())
  username     String        @unique(map: "User_username_key")
  email        String?       @unique(map: "User_email_key")
  phone        String?       @unique(map: "User_phone_key")
  password     String
  name         String?
  avatar       String?
  gender       String?
  birthday     DateTime?
  address      String?
  bio          String?
  lastLoginAt  DateTime?
  lastLoginIp  String?
  status       user_status   @default(ACTIVE)
  roles        String        @default("user") // 存储角色字符串（已有字段）
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // 关系
  post         post[]
  refreshtoken refreshtoken?
  userrole     userrole[]    // 通过中间表与角色关联
  rolesDirect  role[]        @relation("UserToRole") // 多对多关系：用户-角色
}

model userrole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  role      role     @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "UserRole_roleId_fkey")
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserRole_userId_fkey")

  @@unique([userId, roleId], map: "UserRole_userId_roleId_key")
  @@index([roleId], map: "UserRole_roleId_fkey")
}

model verificationcode {
  id        Int      @id @default(autoincrement())
  type      String // email 或 phone
  target    String // 邮箱或手机号
  code      String // 验证码
  expiresAt DateTime // 过期时间
  used      Boolean  @default(false) // 是否已使用
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([target, type])
}

enum user_status {
  ACTIVE
  INACTIVE
  LOCKED
}

// 菜单权限关联表 - 优化字段和关系名称
model menuPermission {
  id           Int        @id @default(autoincrement())
  menuId       Int
  permissionId Int
  // 操作类型：view(查看), add(添加), edit(编辑), delete(删除)等
  actionType   String     @default("view")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // 修改关系名称使其与model一致
  menu         menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  permission   permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([menuId, permissionId, actionType])
  @@index([menuId])
  @@index([permissionId])
}
