generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 菜单类型枚举
enum MenuType {
  DIRECTORY  // 目录
  MENU       // 菜单
  BUTTON     // 按钮
}

// 菜单布局枚举
enum LayoutType {
  DEFAULT    // 默认布局
  BLANK      // 空白布局
  CUSTOM     // 自定义布局
}

// 操作类型枚举
enum ActionType {
  VIEW   // 查看
  ADD    // 添加
  EDIT   // 编辑
  DELETE // 删除
  EXPORT // 导出
  IMPORT // 导入
}

model menu {
  id            Int              @id @default(autoincrement())
  name          String          // 菜单名称
  routeName     String?         // 路由名称，用于前端路由配置
  path          String?         // 路由路径，按钮类型为空
  component     String?         // 组件路径，按钮类型为空
  layout        LayoutType      @default(DEFAULT)  // 布局类型
  redirect      String?         // 重定向路径
  icon          String?         // 图标，按钮类型为空
  i18nKey       String?         // 国际化key
  type          MenuType        @default(MENU)    // 菜单类型：目录/菜单/按钮
  permission    String?         // 权限标识，按钮类型必填
  params        Json?           // 路由参数，使用JSON存储
  query         Json?           // 路由查询参数，使用JSON存储
  sort          Int            @default(0)    // 排序号
  hidden        Boolean        @default(false) // 是否隐藏菜单
  hideTab       Boolean        @default(false) // 是否隐藏页签
  hideMenu      Boolean        @default(false) // 是否隐藏左侧菜单
  hideBreadcrumb Boolean       @default(false) // 是否隐藏面包屑
  hideChildren  Boolean        @default(false) // 是否隐藏子菜单
  status        Int            @default(1)     // 菜单状态：1启用，0禁用
  isExternal    Boolean        @default(false) // 是否外链
  keepAlive     Boolean        @default(false) // 是否缓存路由
  constant      Boolean        @default(false) // 是否为常量路由
  affix         Boolean        @default(false) // 是否固定标签
  parentId      Int?                          // 父菜单ID
  createdBy     Int?                          // 创建人ID
  updatedBy     Int?                          // 更新人ID
  createdAt     DateTime       @default(now()) // 创建时间
  updatedAt     DateTime       @updatedAt      // 更新时间
  remark        String?                        // 备注说明
  
  // 关系
  parent        menu?          @relation("menuTomenu", fields: [parentId], references: [id])
  children      menu[]         @relation("menuTomenu")
  rolemenu      rolemenu[]     // 通过中间表与角色关联
  roles         role[]         @relation("RoleToMenu") // 多对多关系：菜单-角色
  menuPermissions menuPermission[] // 菜单-权限关联
  creator       user?          @relation("MenuCreator", fields: [createdBy], references: [id])
  updater       user?          @relation("MenuUpdater", fields: [updatedBy], references: [id])

  @@index([parentId])
  @@index([createdBy])
  @@index([updatedBy])
}

model permission {
  id             Int              @id @default(autoincrement())
  code           String           @unique(map: "Permission_code_key")
  name           String
  description    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // 关系
  rolepermission rolepermission[] // 通过中间表与角色关联
  roles          role[]           @relation("RoleToPermission") // 多对多关系：权限-角色
  
  // 修改：统一使用menuPermission作为权限-菜单关联表
  menuPermissions menuPermission[] // 权限-菜单详细关联，包含actionType
}

model post {
  id        String   @id
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user?    @relation(fields: [authorId], references: [id], map: "Post_authorId_fkey")

  @@index([authorId], map: "Post_authorId_fkey")
}

model refreshtoken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "RefreshToken_token_key")
  userId    Int      @unique(map: "RefreshToken_userId_key")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "RefreshToken_userId_fkey")
}

model role {
  id             Int              @id @default(autoincrement())
  name           String           @unique(map: "Role_name_key")
  description    String?
  status         Int              @default(1)  // 添加状态字段，默认为1（启用）
  // 父角色ID，形成角色继承关系
  parentId       Int?
  // 是否是系统内置角色，内置角色不可删除
  isSystem       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // 关系
  rolemenu       rolemenu[]       // 通过中间表与菜单关联
  rolepermission rolepermission[] // 通过中间表与权限关联
  userrole       userrole[]       // 通过中间表与用户关联
  permissions    permission[]     @relation("RoleToPermission") // 多对多关系：角色-权限
  menus          menu[]           @relation("RoleToMenu") // 多对多关系：角色-菜单
  users          user[]           @relation("UserToRole") // 多对多关系：角色-用户
  
  // 角色继承关系
  parent         role?            @relation("RoleInheritance", fields: [parentId], references: [id], onDelete: SetNull)
  children       role[]           @relation("RoleInheritance")
  
  @@index([parentId])
}

model rolemenu {
  id        Int      @id @default(autoincrement())
  roleId    Int
  menuId    Int
  createdAt DateTime @default(now())
  menu      menu     @relation(fields: [menuId], references: [id], onDelete: Cascade, map: "RoleMenu_menuId_fkey")
  role      role     @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "RoleMenu_roleId_fkey")

  @@unique([roleId, menuId], map: "RoleMenu_roleId_menuId_key")
  @@index([menuId], map: "RoleMenu_menuId_fkey")
}

model rolepermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())
  permission   permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "RolePermission_permissionId_fkey")
  role         role       @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "RolePermission_roleId_fkey")

  @@unique([roleId, permissionId], map: "RolePermission_roleId_permissionId_key")
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model user {
  id           Int           @id @default(autoincrement())
  username     String        @unique(map: "User_username_key")
  email        String?       @unique(map: "User_email_key")
  phone        String?       @unique(map: "User_phone_key")
  password     String
  name         String?
  avatar       String?
  gender       String?
  birthday     DateTime?
  address      String?
  bio          String?
  lastLoginAt  DateTime?
  lastLoginIp  String?
  status       user_status   @default(ACTIVE)
  roles        String        @default("user") // 存储角色字符串（已有字段）
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // 关系
  post         post[]
  refreshtoken refreshtoken?
  userrole     userrole[]    // 通过中间表与角色关联
  rolesDirect  role[]        @relation("UserToRole") // 多对多关系：用户-角色
  
  // 添加与 menu 的关系
  createdMenus  menu[]  @relation("MenuCreator")
  updatedMenus  menu[]  @relation("MenuUpdater")
}

model userrole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  role      role     @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "UserRole_roleId_fkey")
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserRole_userId_fkey")

  @@unique([userId, roleId], map: "UserRole_userId_roleId_key")
  @@index([roleId], map: "UserRole_roleId_fkey")
}

model verificationcode {
  id        Int      @id @default(autoincrement())
  type      String // email 或 phone
  target    String // 邮箱或手机号
  code      String // 验证码
  expiresAt DateTime // 过期时间
  used      Boolean  @default(false) // 是否已使用
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([target, type])
}

enum user_status {
  ACTIVE
  INACTIVE
  LOCKED
}

// 菜单权限关联表 - 优化字段和关系名称
model menuPermission {
  id           Int        @id @default(autoincrement())
  menuId       Int
  permissionId Int
  actionType   ActionType @default(VIEW) // 操作类型
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // 关系
  menu         menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  permission   permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([menuId, permissionId, actionType])
  @@index([menuId])
  @@index([permissionId])
}
